@using Syncfusion.EJ2.Navigations
@using Syncfusion.EJ2
@using Syncfusion.EJ2.Grids
@{
    ViewData["Title"] = "Admin - Accounts";
    var isAdmin = User.IsInRole("Admin") ? "true" : "false"; // Check if the user is an admin
}

<style>
    ::-webkit-scrollbar {
        width: 0px !important;
    }
   
    ::-webkit-scrollbar-thumb {
        background: #808080 !important;
    }

    .container {
        padding-top: 25px;
        max-width: 95%;
    }

    h2 {
        padding-left: 10px
    }

    .spacer {
        margin-left: 5px; 
    }

    .custom-approve{
        color: #fff !important;
        background-color: #1D7AFC;
        border-color: #1D7AFC;
    }

    .custom-approve:focus {
        background-color: #1D7AFC;
        border-color: #1D7AFC !important;
    }

    .custom-approve:focus:active {
        background-color: #1D7AFC;
        border-color: #1D7AFC !important;
        box-shadow: 0 0 2px 1px #1D7AFC !important;
    }

    .custom-deny{
        color: #fff !important;
        background-color: #E64655;
        border-color: #E64655;
    }

    .custom-deny:focus {
        border-color: #E64655;
        background-color: #E64655 !important;
    }

    .custom-deny:focus:active {
        border-color: #E64655;
        background-color: #E64655 !important;
        box-shadow: 0 0 2px 1px #E64655 !important;
    }



</style>

<h2>Admin - Accounts</h2>
<div class="container">
    @(Html.EJS().Tab("tabs")
        .ContentTemplate(
        @<div>
            <div class="e-tab-header">
                <div>Admin Users</div>
                <div>Users</div>
                @if (ViewBag.NumberOfPendingUsers > 0)
                {
                    <div>
                        User Requests<span class="badge badge-danger spacer">@ViewBag.NumberOfPendingUsers</span>
                    </div>
                }
                else
                {
                    <div>User Requests</div>
                }
            </div>
            <div class="e-content">
                <div>
                    @(Html.EJS().Grid("adminGrid")
                        .Height("400px")
                        .DataSource(dataManger => {
                            dataManger.Url("/Admin/AdminUsersList").Key("id").CrossDomain(false);
                            dataManger.UpdateUrl("/Admin/UpdateUser").Adaptor("UrlAdaptor");
                            dataManger.RemoveUrl("/Admin/RemoveUser").Adaptor("UrlAdaptor");
                        })
                        .Columns(col => {
                            col.Field("name").HeaderText("Name").Width("120").Add();
                            col.Field("emailId").HeaderText("Email").Width("150").Add();
                            
                        })
                        .AllowPaging()
                        .EditSettings(editSettings => editSettings
                            .AllowEditing(true)
                            .AllowDeleting(true)
                            .ShowDeleteConfirmDialog(true)
                            .Mode(EditMode.Normal) 
                        )
                        .Toolbar(new string[] {"Delete", "Update", "Cancel" })
                        .Render()
                    )
                </div>
         
                <div>
                    @(Html.EJS().Grid("userGrid")
                        .Height("400px")
                        .DataSource(dataManger => {
                            dataManger.Url("/Admin/UsersList").Key("id").CrossDomain(false);
                            dataManger.UpdateUrl("/Admin/UpdateUser").Adaptor("UrlAdaptor");
                            dataManger.RemoveUrl("/Admin/RemoveUser").Adaptor("UrlAdaptor");
                        })
                        .Columns(col => {
                            col.Field("id").IsPrimaryKey(true).Visible(false).Add();
                            col.Field("name").HeaderText("Name").Width("120").Add();
                            col.Field("emailId").HeaderText("Email").Width("150").Add();
                            
                        })
                        .AllowPaging()
                        .EditSettings(editSettings => editSettings
                            .AllowEditing(true)
                            .AllowDeleting(true)
                            .ShowDeleteConfirmDialog(true)
                            .Mode(EditMode.Normal) 
                        )
                        .Toolbar(new string[] {"Delete", "Update", "Cancel" })
                        .Render()
                    )
                </div>

                <div>
                    @(Html.EJS().Grid("pendingUserGrid")
                        .Height("400px")
                        .DataSource(dataManger => {
                            dataManger.Url("/Admin/PendingUsersList").Key("id").CrossDomain(false);
                        })
                        .Columns(col => {
                            col.Field("name").HeaderText("Name").Width("120").Add();
                            col.Field("emailId").HeaderText("Email").Width("150").Add();

                            col.HeaderText("Actions").Template("<button class='k-button custom-approve' onclick='onApprove(this)'>Approve</button> <button class='k-button custom-deny' onclick='onDeny(this)'>Deny</button>").Width("100").Add();
                            
                        })
                        .AllowPaging()
                        .Render()
                    )
                </div>
            </div>
        </div>
        )
        .HeightAdjustMode(HeightStyles.Content)
        .OverflowMode(OverflowMode.Scrollable)
        .Render()
    )
 </div>

<div id="ApprovalModalSection"></div>
<div id="DenyModalSection"></div>

<script>
    function onApprove(e) {
        var gridObj = document.getElementById('pendingUserGrid').ej2_instances[0];

        var row = e.closest('tr');

        var uid = row.getAttribute('data-uid');

        var rowData = gridObj.getRowObjectFromUID(uid).data;

        // Load modal content using AJAX
        $("#ApprovalModalSection").load('@Html.Raw(Url.Action("RenderApprovalModal", "Admin"))', function () {
            var dataItemString = JSON.stringify(rowData).replace(/'/g, "\\'");
            $('#ApprovalModalBtn').attr("onClick", "Approve('" + dataItemString + "')");
            $('#ApprovalModal').modal('show');
        });
    }

    function onDeny(e) {
        var gridObj = document.getElementById('pendingUserGrid').ej2_instances[0];

        var row = e.closest('tr');

        var uid = row.getAttribute('data-uid');

        var rowData = gridObj.getRowObjectFromUID(uid).data;

        $("#DenyModalSection").load('@Html.Raw(Url.Action("RenderDenyModal", "Admin"))', function () {
            var dataItemString = JSON.stringify(rowData).replace(/'/g, "\\'");
            $('#DenyModalBtn').attr("onClick", "Deny('" + dataItemString + "')");
            $('#DenyModal').modal('show');
        });
    }

    function Approve(dataItemString) {
        var userGrid = document.getElementById('userGrid').ej2_instances[0];
        var pendingUserGrid = document.getElementById('pendingUserGrid').ej2_instances[0];

        const pendingUsersCounterElement = document.querySelector('.badge.badge-danger.spacer');
        $('#ApprovalModal').modal('hide');

        var dataItem = JSON.parse(dataItemString);
        console.log(dataItem)
        $.ajax({
            url: '/Admin/ApproveUser',
            type: 'POST',
            data: { userId: dataItem.id },
            success: function (result) {
                console.log('User approved successfully');
                userGrid.refresh();
                pendingUserGrid.refresh();

                $.ajax({
                    url: '/Admin/GetNumberOfPendingUsers',
                    type: 'GET',
                    dataType: 'json',
                    success: function (data) {
                        if (data > 1) {
                            pendingUsersCounterElement.textContent = `${data}`;
                        } else {
                            pendingUsersCounterElement.classList.remove('badge-danger');
                            pendingUsersCounterElement.textContent = ``;
                        }

                    },
                    error: function (xhr, status, error) {
                        // Handle errors if any
                        console.error('Error fetching number of pending users:', error);
                    }
                });


            },
            error: function (error) {
                // Handle error
                console.error('Error approving user', error);
            }
        });
    }

    function Deny(dataItemString) {
        var userGrid = document.getElementById('userGrid').ej2_instances[0];
        var pendingUserGrid = document.getElementById('pendingUserGrid').ej2_instances[0];

        const pendingUsersCounterElement = document.querySelector('.badge.badge-danger.spacer');

        $('#DenyModal').modal('hide');

        var dataItem = JSON.parse(dataItemString);

        $.ajax({
            url: '/Admin/DenyUser',
            type: 'POST',
            data: { userId: dataItem.id },
            success: function (result) {
                console.log('User denied successfully');
                userGrid.refresh();
                pendingUserGrid.refresh();

                $.ajax({
                    url: '/Admin/GetNumberOfPendingUsers',
                    type: 'GET',
                    dataType: 'json',
                    success: function (data) {
                        if (data > 1) {
                            pendingUsersCounterElement.textContent = `${data}`;
                        } else {
                            pendingUsersCounterElement.classList.remove('badge-danger');
                            pendingUsersCounterElement.textContent = ``;
                        }

                    },
                    error: function (xhr, status, error) {
                        // Handle errors if any
                        console.error('Error fetching number of pending users:', error);
                    }
                });
            },
            error: function (error) {
                // Handle error
                console.error('Error denying user', error);
            }
        });
    }
</script>