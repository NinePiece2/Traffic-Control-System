@using Microsoft.Extensions.Configuration;
@model Traffic_Control_System.Models.VideStreamViewModel
@{
    ViewData["Title"] = "Traffic Control - Live View";
}

<link href="https://vjs.zencdn.net/7.10.2/video-js.css" rel="stylesheet" />
<script src="https://vjs.zencdn.net/7.10.2/video.min.js"></script>

<style>
    .page-container {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;
        height: 75vh;
        padding: 5px;
        box-sizing: border-box;
    }

    .video-wrapper {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        width: 40%;
        height: 100%;
    }

    .video-container {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;
        height: 100%;
        overflow: hidden;
        margin-right: 10px;
        aspect-ratio: 16 / 9;
        position: relative;
    }

    .video-container video, .video-container img, .video-container .vjs-tech, .video-container .video-js{
        width: 100%;
        object-fit: contain;
        position: absolute;
    }

    .info-container {
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        align-items: flex-start;
        margin-left: 10px;
        width: 50%;
        height: 100%;
        max-height: 100%;
    }

    .intersection-info {
        font-size: 18px;
        text-align: center;
        width: 100%;
    }

    .directions {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        flex-grow: 1;
    }

    .traffic-light-container {
        display: flex;
        justify-content: space-between; /* Space wrappers evenly */
        align-items: center;
        width: 100%; /* Ensure full width */
    }

    .traffic-light-wrapper,
    .traffic-light-wrapper-2 {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px;
        width: 50%; /* Each wrapper takes half of the parent container */
        height: 35%;
    }

    .traffic-light1,
    .traffic-light1-2 {
        display: flex;
        flex-direction: column; /* Align items vertically */
        justify-content: center; /* Center items vertically */
        align-items: center; /* Center items horizontally */
        width: auto;
        gap: 10px;
    }


    .traffic-light2, 
    .traffic-light2-2 {
        display: flex;
        flex-direction: column; /* Align items vertically */
        justify-content: center; /* Center items vertically */
        align-items: center; /* Center items horizontally */
        width: auto;
        gap: 10px;
    }

    .traffic-light1 div,
    .traffic-light1-2 div{
        width: 50px;
        height: 50px;
        border-radius: 50%;
        margin: 5px 0;
    }

    .traffic-light2 div,
    .traffic-light2-2 div {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        margin: 5px 0;
    }

    .green1, .green1_2 { background-color: green; }
    .yellow1, .yellow1_2 { background-color: yellow; }
    .red1, .red1_2 { background-color: red; }

    .green2, .green2_2 { background-color: green; }
    .yellow2, .yellow2_2 { background-color: yellow; }
    .red2, .red2_2 { background-color: red; }

    .countdown-container, 
    .countdown-container-2 {
        display: flex;
        flex-direction: column; /* Stack timers vertically like traffic lights */
        justify-content: center; /* Align timers vertically */
        align-items: center; /* Align timers horizontally with traffic lights */
        width: auto;
        padding-top: 30px;
        padding-bottom: 10px;
    }

    .countdown, .countdown-2 {
        display: flex;
        flex-direction: row; /* Align name and timer horizontally */
        align-items: center;
        gap: 10px; /* Add spacing between name and timer */
        margin-bottom: 40px; /* Adds spacing between rows */
    }

    .countdown span, .countdown-2 span {
        font-size: 16px;
        font-weight: bold;
    }

    .timer, .timer-2 {
        font-size: 24px;
        font-weight: bold;
        margin-top: 20px;
    }

    .manual-override-btn {
        margin-top: 10px;
        padding: 10px 20px;
        font-size: 18px;
        background-color: grey;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        text-align: center;
        width: 100%;
    }

    .manual-override-btn:hover {
        background-color: silver;
        color: black;
    }
</style>

<div class="page-container">
    <div class="video-wrapper">
    <div class="video-container">
        <video id="my-video" class="video-js vjs-default-skin" controls preload="auto" data-setup='{}'>
            <source src="@Model.VideoURL" type="application/x-mpegURL">
        </video>
        <img id="error-image" src="/Images/error-placeholder.jpg" alt="Video unavailable" 
            style="display: none; position: relative;">
    </div>
    <!-- Manual Override Button -->
        <button id="manualOverride" class="manual-override-btn">Manual Override</button>
    </div>
    

    <div class="info-container">
        <div class="intersection-info">
            <p><strong>@Model.Intersection</strong></p>
        </div>

        <!-- Direction 1 -->
        <div class="direction-container">
            <p><strong>Direction 1:</strong> @Model.Direction1</p>
        </div>
        
        <div class="traffic-light-container">
        <div class="traffic-light-wrapper">
        <div class="traffic-light1">
            <div class="green1"></div>
            <div class="yellow1"></div>
            <div class="red1"></div>
        </div>
        
        <div class="countdown-container">
            <div class="countdown">
                <span>Green</span>
                <span class="timeGreen1">01:30</span> <!-- Green light timer -->
            </div>
            <div class="countdown">
                <span>Yellow</span>
                <span class="timeYellow1">00:10</span> <!-- Yellow light timer -->
            </div>
            <div class="countdown">
                <span>Red</span>
                <span class="timeRed1">02:00</span> <!-- Red light timer -->
            </div>
        </div>
        </div>

        <div class="traffic-light-wrapper-2">
        <div class="traffic-light1-2">
            <div class="green1"></div>
            <div class="yellow1"></div>
            <div class="red1"></div>
        </div>
        
        <div class="countdown-container-2">
            <div class="countdown-2">
                <span>Green</span>
                <span class="timeGreen1">01:30</span> <!-- Green light timer -->
            </div>
            <div class="countdown-2">
                <span>Yellow</span>
                <span class="timeYellow1">00:10</span> <!-- Yellow light timer -->
            </div>
            <div class="countdown-2">
                <span>Red</span>
                <span class="timeRed1">02:00</span> <!-- Red light timer -->
            </div>
        </div>
        </div>
        </div>

        <!-- Direction 2 -->
        <div class="direction-container">
            <p><strong>Direction 2:</strong> @Model.Direction2</p>
        </div>
        
        <div class="traffic-light-container">
        <div class="traffic-light-wrapper">
        <div class="traffic-light2">
            <div class="green2"></div>
            <div class="yellow2"></div>
            <div class="red2"></div>
        </div>
        
        <div class="countdown-container">
            <div class="countdown">
                <span>Green</span>
                <span class="timeGreen2">01:30</span> <!-- Green light timer -->
            </div>
            <div class="countdown">
                <span>Yellow</span>
                <span class="timeYellow2">00:10</span> <!-- Yellow light timer -->
            </div>
            <div class="countdown">
                <span>Red</span>
                <span class="timeRed2">02:00</span> <!-- Red light timer -->
            </div>
        </div>
        </div>

        <div class="traffic-light-wrapper-2">
        <div class="traffic-light2-2">
            <div class="green2"></div>
            <div class="yellow2"></div>
            <div class="red2"></div>
        </div>
        
        <div class="countdown-container-2">
            <div class="countdown-2">
                <span>Green</span>
                <span class="timeGreen2">01:30</span> <!-- Green light timer -->
            </div>
            <div class="countdown-2">
                <span>Yellow</span>
                <span class="timeYellow2">00:10</span> <!-- Yellow light timer -->
            </div>
            <div class="countdown-2">
                <span>Red</span>
                <span class="timeRed2">02:00</span> <!-- Red light timer -->
            </div>
        </div>
        </div>
        </div>
    </div>
</div>

@section scripts {
    <script>
        var player = videojs('my-video', {
            controls: true,
            autoplay: false,
            muted: true,
            preload: 'auto',
            techOrder: ['html5']
        });

        player.play();

        player.on('error', function () {
            //console.error("Video error detected!");
            
            // Hide the video player and show the image
            document.getElementById("my-video").style.display = "none";
            document.getElementById("error-image").style.display = "block";

            // Retry the video every 5 seconds
            let retryInterval = setInterval(() => {
                //console.log("Retrying video...");
                player.src(player.currentSrc()); // Reload the same video source
                player.load();
                player.play().then(() => {
                    console.log("Video is now playing!");

                    // Show the video and hide the image
                    document.getElementById("my-video").style.display = "block";
                    document.getElementById("error-image").style.display = "none";

                    // Stop retrying since the video is working
                    clearInterval(retryInterval);
                }).catch((err) => {
                    //console.warn("Retry failed, still an error:", err);
                });
            }, 3000);
        });

        $(document).ready(function () {
            $('.timeGreen1, .timeYellow1, .timeRed1, .timeGreen2, .timeYellow2, .timeRed2').each(function () {
                $(this).text('');
            });

            $('.green1, .yellow1, .green2, .yellow2').each(function () {
                $(this).css('opacity', '0.3');
            });

            $('.red1, .red2').each(function () {
                $(this).css('opacity', '1');
            });

            $(`.timeGreen1`).each(function () {
                console.log("Test");
            });
        });


        // Helper function to activate the specific colored light for both primary and secondary traffic lights in each direction
        function activateColorLight(direction, colour, time) {
            if (direction === 1) {
                if (colour === 'Green') {
                    $('.green1, .red2').each(function () {
                        $(this).css('opacity', '1');
                    });
                    $('.yellow1, .yellow2, .red1, .green2').each(function () {
                        $(this).css('opacity', '0.3');
                    });
                } else if (colour === 'Yellow') {
                    $('.yellow1, .red2').each(function () {
                        $(this).css('opacity', '1');
                    });
                    $('.green1, .yellow2, .red1, .green2').each(function () {
                        $(this).css('opacity', '0.3');
                    });
                } else {
                    $('.red1, .red2').each(function () {
                        $(this).css('opacity', '1');
                    });
                    $('.green1, .yellow2, .yellow1, .green2').each(function () {
                        $(this).css('opacity', '0.3');
                    });
                }
            } else {
                if (colour === 'Green') {
                    $('.green2, .red1').each(function () {
                        $(this).css('opacity', '1');
                    });
                    $('.yellow1, .yellow2, .red2, .green1').each(function () {
                        $(this).css('opacity', '0.3');
                    });
                } else if (colour === 'Yellow') {
                    $('.yellow2, .red1').each(function () {
                        $(this).css('opacity', '1');
                    });
                    $('.green1, .yellow1, .red2, .green2').each(function () {
                        $(this).css('opacity', '0.3');
                    });
                } else {
                    $('.red2, .red1').each(function () {
                        $(this).css('opacity', '1');
                    });
                    $('.green1, .yellow2, .yellow1, .green2').each(function () {
                        $(this).css('opacity', '0.3');
                    });
                }
            }

            let lights = document.querySelectorAll(`.traffic-light${direction} .${colour}`);
            
            lights.forEach(light => {
                light.style.opacity = '1'; // Set the active light to 100% visibility
            });

            $('.timeGreen1, .timeYellow1, .timeRed1, .timeGreen2, .timeYellow2, .timeRed2').each(function () {
                $(this).text('');
            });

            document.querySelectorAll(`.time${colour}${direction}`).forEach(element => {
                element.innerText = formatTime(time);
            });

        }


        function formatTime(seconds) {
            var minutes = Math.floor(seconds / 60);
            seconds = seconds % 60;
            return `${minutes < 10 ? '0' : ''}${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
        }

        @* setInterval(function() {
            updateTimers();
        }, 1000); *@

        document.addEventListener("DOMContentLoaded", function () {
            const urlParams = new URLSearchParams(window.location.search);
            const activeSignalID = urlParams.get('ID');
            const connection = new signalR.HubConnectionBuilder()
                .withUrl(`/controlhub?clientType=JavaScript&activeSignalID=${activeSignalID}`)
                .withAutomaticReconnect([0, 2000, 10000, 30000])
                .build();

            connection.on("ReceiveMessage", function (user, message) {
                // Split the message into key-value pairs
                const parts = message.split(" || ");

                // Create an object to store extracted values
                const data = {};

                // Process each part
                parts.forEach(part => {
                    let [key, value] = part.split(": ").map(str => str.trim());

                    if (key === "Status") {
                        // Assume value is "light_dir_1" or "light_dir_2"
                        const partsArr = value.split("_");
                        // Get the last element and convert it to a number
                        data.lightDirection = parseInt(partsArr[partsArr.length - 1], 10);
                    }
                    if (key === "Colour") {
                        data.colour = value;
                    }
                    if (key === "Time") {
                        data.time = Math.round(parseFloat(value)); // Convert to number and round
                    }
                });

                //console.log(data);

                activateColorLight(data.lightDirection, data.colour, data.time);


            });

            connection.start().then(function () {
                document.getElementById("manualOverride").addEventListener("click", function (event) {
                    const activeSignalID = urlParams.get('ID');
                    connection.invoke("SendMessageToClientFromJS", activeSignalID, "Manual Override").catch(function (err) {
                        return console.error(err.toString());
                    });
                    event.preventDefault();
                });
            }).catch(function (err) {
                return console.error(err.toString());
            });

            connection.onclose(error => {
                // Try restarting the connection manually if needed:
                connection.start().catch(err => console.error("Failed to restart connection:", err.toString()));
            });
        });
    </script>
}