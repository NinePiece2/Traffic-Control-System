@using Microsoft.Extensions.Configuration;
@model Traffic_Control_System.Models.VideStreamViewModel
@{
    ViewData["Title"] = "Traffic Control - Live View";
}

<link href="https://vjs.zencdn.net/7.10.2/video-js.css" rel="stylesheet" />
<script src="https://vjs.zencdn.net/7.10.2/video.min.js"></script>

<style>
    .page-container {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;
        height: 75vh;
        border: 1px solid red;
        padding: 5px;
        box-sizing: border-box;
    }

    .video-container {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 40%;
        height: 100%;
        overflow: hidden;
        border: 1px solid yellow;
        margin-right: 10px;
        aspect-ratio: 16 / 9;
        position: relative;
    }

    .video-container video, .video-container img {
        width: 100%;
        object-fit: cover;
        position: absolute;
    }

    .info-container {
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        align-items: flex-start;
        margin-left: 10px;
        width: 50%;
        height: 100%;
        max-height: 100%;
        border: 1px solid blue;
    }

    .intersection-info {
        font-size: 18px;
        margin-bottom: 10px;
        text-align: center;
        width: 100%;
    }

    .directions {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        margin-bottom: 20px;
        flex-grow: 1;
    }

    .direction-container {
        margin-bottom: 20px;
    }

    .traffic-light1 {
        display: flex;
        justify-content: space-evenly;
        align-items: center;
        width: 100%;
        margin-top: 5px;
        padding-bottom: 10px;
    }

    .traffic-light2 {
        display: flex;
        justify-content: space-evenly;
        align-items: center;
        width: 100%;
        margin-top: 5px;
        padding-bottom: 10px;
    }

    .traffic-light1 div {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        margin: 5px 0;
    }

    .traffic-light2 div {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        margin: 5px 0;
    }

    .green1 { background-color: green; }
    .yellow1 { background-color: yellow; }
    .red1 { background-color: red; }

    .green2 { background-color: green; }
    .yellow2 { background-color: yellow; }
    .red2 { background-color: red; }

    .countdown-container {
        display: flex;
        justify-content: space-evenly;
        width: 100%;
        padding-bottom: 30px;
    }

    .countdown {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .countdown span {
        font-size: 16px;
        font-weight: bold;
    }

    .timer {
        font-size: 24px;
        font-weight: bold;
        margin-top: 20px;
    }

    .manual-override-btn {
        margin-top: 20px;
        padding: 10px 20px;
        font-size: 18px;
        background-color: grey;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        text-align: center;
        width: 100%;
    }

    .manual-override-btn:hover {
        background-color: silver;
        color: black;
    }
</style>

<div class="page-container">
    <div class="video-container">
        <video id="my-video" class="video-js vjs-default-skin" controls preload="auto" data-setup='{}'>
            <source src="@Model.VideoURL" type="application/x-mpegURL">
        </video>
        <img id="error-image" src="/Images/error-placeholder.jpg" alt="Video unavailable" 
            style="display: none; position: relative;">
    </div>

    <div class="info-container">
        <div class="intersection-info">
            <p><strong>@Model.Intersection</strong></p>
        </div>

        <!-- Direction 1 -->
        <div class="direction-container">
            <p><strong>Direction 1:</strong> @Model.Direction1</p>
        </div>
        <div class="traffic-light1">
            <div class="green1"></div>
            <div class="yellow1"></div>
            <div class="red1"></div>
        </div>
        
        <div class="countdown-container">
            <div class="countdown">
                <span>Green</span>
                <span id="timeGreen1">01:30</span> <!-- Green light timer -->
            </div>
            <div class="countdown">
                <span>Yellow</span>
                <span id="timeYellow1">00:10</span> <!-- Yellow light timer -->
            </div>
            <div class="countdown">
                <span>Red</span>
                <span id="timeRed1">02:00</span> <!-- Red light timer -->
            </div>
        </div>

        <!-- Direction 2 -->
        <div class="direction-container">
            <p><strong>Direction 2:</strong> @Model.Direction2</p>
        </div>
        <div class="traffic-light2">
            <div class="green2"></div>
            <div class="yellow2"></div>
            <div class="red2"></div>
        </div>
        
        <div class="countdown-container">
            <div class="countdown">
                <span>Green</span>
                <span id="timeGreen2">01:30</span> <!-- Green light timer -->
            </div>
            <div class="countdown">
                <span>Yellow</span>
                <span id="timeYellow2">00:10</span> <!-- Yellow light timer -->
            </div>
            <div class="countdown">
                <span>Red</span>
                <span id="timeRed2">02:00</span> <!-- Red light timer -->
            </div>
        </div>

        <!-- Manual Override Button -->
        <button class="manual-override-btn">Manual Override</button>
    </div>
</div>

<script>
    var player = videojs('my-video', {
        controls: true,
        autoplay: false,
        preload: 'auto',
        techOrder: ['html5']
    });

    player.play();

    player.on('canplay', function () {
        console.log("Video is ready, attempting to play...");
        player.play().catch(error => {
            console.warn("Autoplay failed due to browser restrictions:", error);
        });
    });

    player.on('error', function () {
            console.error("Video error detected!");
            
            // Hide the video player and show the image
            document.getElementById("my-video").style.display = "none";
            document.getElementById("error-image").style.display = "block";

            // Retry the video every 2 seconds
            let retryInterval = setInterval(() => {
                console.log("Retrying video...");
                player.src(player.currentSrc()); // Reload the same video source
                player.load();
                player.play().then(() => {
                    console.log("Video is now playing!");

                    // Show the video and hide the image
                    document.getElementById("my-video").style.display = "block";
                    document.getElementById("error-image").style.display = "none";

                    // Stop retrying since the video is working
                    clearInterval(retryInterval);
                }).catch((err) => {
                    console.warn("Retry failed, still an error:", err);
                });
            }, 2000);
        });

    // Initial Timers
    var green1 = 90;  // 1 minute 30 seconds for green in Direction 1
    var yellow1 = 10; // 10 seconds for yellow in Direction 1
    var green2 = 90;  // 1 minute 30 seconds for green in Direction 2
    var yellow2 = 10; // 10 seconds for yellow in Direction 2

    // Initial red durations for both directions
    var red1 = green2 + yellow2; // Red duration for Direction 1 is equal to Direction 2's green + yellow time
    var red2 = green1 + yellow1; // Red duration for Direction 2 is equal to Direction 1's green + yellow time

    var currentDirection = 1;
    var currentPhase1 = 'green'; // Phase for Direction 1
    var currentPhase2 = 'red'; // Phase for Direction 2

    function updateTimers() {
        // Hide all timers initially
        document.querySelectorAll('#timeGreen1, #timeYellow1, #timeRed1, #timeGreen2, #timeYellow2, #timeRed2').forEach(timer => {
            timer.style.display = 'none';
        });

        // Update Direction 1
        if (currentPhase1 === 'green') {
            green1--;
            red2--;
            document.getElementById(`timeGreen1`).innerText = formatTime(green1);
            document.getElementById('timeGreen1').style.display = 'block';  // Show green timer for Direction 1
            document.getElementById(`timeRed2`).innerText = formatTime(red2);
            document.getElementById('timeRed2').style.display = 'block';  // Show red timer for Direction 2
            activateLight();  // Activate lights based on the active timers
            if (green1 <= 0) {
                currentPhase1 = 'yellow';
                green1 = 90;  // Reset green to 90 seconds when transitioning
                red1 = green2 + yellow2; // Update red to match the new green and yellow sum
            }
        } else if (currentPhase1 === 'yellow') {
            yellow1--;
            red2--;
            document.getElementById(`timeYellow1`).innerText = formatTime(yellow1);
            document.getElementById('timeYellow1').style.display = 'block';  // Show yellow timer for Direction 1
            document.getElementById(`timeRed2`).innerText = formatTime(red2);
            document.getElementById('timeRed2').style.display = 'block';  // Show red timer for Direction 2
            activateLight();  // Activate lights based on the active timers
            if (yellow1 <= 0) {
                currentPhase1 = 'red';
                yellow1 = 10; // Reset yellow to 10 seconds when transitioning
                red1 = green2 + yellow2; // Update red to match the new green and yellow sum
            }
        } else if (currentPhase1 === 'red') {
            red1--;
            document.getElementById(`timeRed1`).innerText = formatTime(red1);
            document.getElementById('timeRed1').style.display = 'block';  // Show red timer for Direction 1
            activateLight();  // Activate lights based on the active timers
            if (red1 <= 0) {
                currentPhase1 = 'green';
                red1 = green2 + yellow2;  // Reset red to match the new green and yellow sum
                currentDirection = 2; // Switch to Direction 2
            }
        }

        // Update Direction 2 (only if it's active)
        if (currentPhase2 === 'green' && currentDirection === 2) {
            green2--;
            red1--;
            document.getElementById(`timeGreen2`).innerText = formatTime(green2);
            document.getElementById('timeGreen2').style.display = 'block';  // Show green timer for Direction 2
            document.getElementById(`timeRed1`).innerText = formatTime(red1);
            document.getElementById('timeRed1').style.display = 'block';  // Show red timer for Direction 1
            activateLight();  // Activate lights based on the active timers
            if (green2 <= 0) {
                currentPhase2 = 'yellow';
                green2 = 90; // Reset green to 90 seconds when transitioning
                red2 = green2 + yellow2; // Update red to match the new green and yellow sum
            }
        } else if (currentPhase2 === 'yellow' && currentDirection === 2) {
            yellow2--;
            red1--;
            document.getElementById(`timeYellow2`).innerText = formatTime(yellow2);
            document.getElementById('timeYellow2').style.display = 'block';  // Show yellow timer for Direction 2
            document.getElementById(`timeRed1`).innerText = formatTime(red1);
            document.getElementById('timeRed1').style.display = 'block';  // Show red timer for Direction 1
            activateLight();  // Activate lights based on the active timers
            if (yellow2 <= 0) {
                currentPhase2 = 'red';
                yellow2 = 10; // Reset yellow to 10 seconds when transitioning
                red2 = green2 + yellow2; // Update red to match the new green and yellow sum
            }
        } else if (currentPhase2 === 'red' && currentDirection === 2) {
            red2--;
            document.getElementById(`timeRed2`).innerText = formatTime(red2);
            document.getElementById('timeRed2').style.display = 'block';  // Show red timer for Direction 2
            activateLight();  // Activate lights based on the active timers
            if (red2 <= 0) {
                currentPhase2 = 'green';
                red2 = green1 + yellow1;  // Reset red to match Direction 1's green and yellow sum
                currentDirection = 1; // Switch to Direction 1
            }
        }
    }

    function activateLight() {
        // Hide all traffic lights
        document.querySelectorAll('.traffic-light1 div, .traffic-light2 div').forEach(light => {
            light.style.opacity = '0.2';  // Set all lights to barely visible
        });

        // Iterate through direction 1 and direction 2 containers to check which timers are active
        for (let i = 1; i <= 2; i++) {
            let timer = document.querySelector(`.direction-container${i} .timer`); // Get the timer for direction i

            // Check if the timer is active (not 0)
            if (timer && timer.textContent !== '0') {
                // Determine which color to activate based on the direction
                if (i === 1) {
                    // Activate lights for direction 1 based on its phase
                    if (currentPhase1 === 'green') {
                        activateColorLight(1, 'green');
                        activateColorLight(2, 'red');
                    } else if (currentPhase1 === 'yellow') {
                        activateColorLight(1, 'yellow');
                        activateColorLight(2, 'red');
                    } else if (currentPhase1 === 'red') {
                        activateColorLight(1, 'red');
                        activateColorLight(2, 'green');
                    }
                } else if (i === 2) {
                    // Activate lights for direction 2 based on its phase
                    if (currentPhase2 === 'green') {
                        activateColorLight(2, 'green');
                        activateColorLight(1, 'red');
                    } else if (currentPhase2 === 'yellow') {
                        activateColorLight(2, 'yellow');
                        activateColorLight(1, 'red');
                    } else if (currentPhase2 === 'red') {
                        activateColorLight(2, 'red');
                        activateColorLight(1, 'green');
                    }
                }
            }
        }
    }

    // Helper function to activate the specific colored light for each direction
    function activateColorLight(direction, color) {
        let light = document.querySelector(`.traffic-light${direction} .${color}`);
        if (light) {
            light.style.opacity = '1';  // Set the active light to 100% visibility
        }
    }


    function formatTime(seconds) {
        var minutes = Math.floor(seconds / 60);
        seconds = seconds % 60;
        return `${minutes < 10 ? '0' : ''}${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
    }

    setInterval(function() {
        updateTimers();
    }, 1000);
</script>